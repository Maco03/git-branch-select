#!/usr/bin/env node
var fs = require( 'fs' )
var path = require( 'path' )
var cliCursor = require( 'cli-cursor' )
var argv = process.argv.slice( 2 )

// Make sure the terminal cursor doesn't stay hidden
// after the program exits
function exitHandler() {
  cliCursor.show()
}

// Catch ctrl+c & exit events
process.on( 'SIGINT', exitHandler )
process.on( 'exit', exitHandler )

const USAGE = `
Usage: git branch-select [options] [search]

Options:
  --version, -v        Show version
  --help, -h           Show usage help

  --local, -l          List local branches only
  --remote, -r         List remote branches only
  --tags, -t           List tags
`

if( argv.includes( '-v' ) || argv.includes( '--version' ) ) {
  console.error( require( '../package.json' ).version )
  process.exit( 0 )
}

if( argv.includes( '-h' ) || argv.includes( '--help' ) ) {
  console.error( USAGE )
  process.exit( 0 )
}

const GIT_HEADS = path.join( '.git', 'refs', 'heads' )
const GIT_REMOTES = path.join( '.git', 'refs', 'remotes' )
const GIT_TAGS = path.join( '.git', 'refs', 'tags' )

function readHeads( basename, remote ) {

  var dirname = path.join( process.cwd(), basename )

  return fs.readdirSync( dirname )
    .filter(( ref ) => ref != 'HEAD')
    .map(( ref ) => {
      var filename = path.join( dirname, ref )
      return { remote, name: ref, commit: fs.readFileSync( filename, 'utf8' ).trim() }
    })

}

function readRemotes() {

  var dirname = path.join( process.cwd(), GIT_REMOTES )
  var remotes = []

  fs.readdirSync( dirname ).forEach(( remote ) => {
    var dirname = path.join( GIT_REMOTES, remote )
    remotes.push.apply( remotes, readHeads( dirname, remote ) )
  })

  return remotes

}

var refs = []

if( argv.includes( '-l' ) || argv.includes( '--local' ) ) {
  refs = readHeads( GIT_HEADS )
} else if( argv.includes( '-r' ) || argv.includes( '--remote' ) ) {
  refs = readRemotes( GIT_REMOTES )
} else if( argv.includes( '-t' ) || argv.includes( '--tags' ) ) {
  refs = readHeads( GIT_TAGS )
} else {
  var heads = readHeads( GIT_HEADS )
  var remotes = readRemotes( GIT_REMOTES ).filter(( remote ) => {
    return !heads.find(( head ) => head.name == remote.name)
  })
  refs = heads.concat( remotes )
}

var spawn = require( 'child_process' ).spawn
var elements = require( 'prompts/lib/elements' )
var Fuse = require( 'fuse.js' )

var choices = refs.map(( ref ) => {
  var title = ref.remote ? `${ref.remote} / ${ref.name}` : `${ref.name}`
  return { title, value: ref }
})

var fuse = new Fuse( choices, {
  shouldSort: true,
  findAllMatches: true,
  minMatchCharLength: 1,
  keys: [ 'title' ],
})

function suggest( input ) {
  return Promise.resolve( input ? fuse.search( input ) : choices )
}

var input = new elements.AutocompletePrompt({
  type: 'autocomplete',
  name: 'value',
  message: 'Select a branch:',
  limit: process.stdout.rows - 3,
  choices: choices,
  suggest: suggest,
})

var search = argv.filter( value => !value.startsWith( '-' ) ).join( ' ' )

// Override initial input & re-render,
// as there's no option to set the initial input value
input.input = search || ''
input.cursor = input.input.length
input.complete( input.render )

input.on( 'submit', ( ref ) => {

  if( ref == null ) {
    console.error( 'No such branch' )
    process.exit( 1 )
  }

  var cmd = 'git'
  var argv = ref.remote ?
    [ 'checkout', '-b', ref.name, '--track', `${ref.remote}/${ref.name}` ] :
    [ 'checkout', ref.name ]

  var git = spawn( cmd, argv, {
    cwd: process.cwd(),
    env: process.env,
    stdio: 'inherit',
  })

})
