#!/usr/bin/env node
var exec = require( 'child_process' ).exec
var cliCursor = require('cli-cursor')
var cmd = require( 'command-join' )
var ask = require( 'cli-autocomplete' )

// Catches ctrl+c & exit events
process.on('SIGINT', exitHandler)
process.on('exit', exitHandler)

function exitHandler() {
  cliCursor.show()
}

function checkout( branch ) {

  if(!branch) {
    process.stdout.write( '\n' )
    process.stdout.write( 'No such branch' )
    process.stdout.write( '\n' )
    process.exit(1)
  }

  exec( cmd([ 'git', 'checkout', branch ]), {
    cwd: process.cwd()
  }, function( error, stdout, stderr ) {

    // Only write out the most important part
    process.stdout.write( '\n' )
    process.stdout.write( stdout.toString().split( /\r?\n/g ).pop() )
    process.stderr.write( stderr.toString().split( /\r?\n/g ).shift() )
    process.stdout.write( '\n' )

    // Print status after branch change manually,
    // as `git checkout` doesn't do color output
    exec( cmd([ 'git', 'status', '-sb' ]), function( _, stdout, stderr ) {

      process.stdout.write( '\n' )
      process.stdout.write( stdout )
      process.stderr.write( stderr )

      process.exit( error ? error.code : 0 )

    })

  })
}

exec( 'git branch --no-color --sort=-committerdate', function( error, stdout, stderr ) {

  var currentBranchIndex = 0
  var lines = stdout.replace( /^\s+|\s+$/g, '' ).split( /\r?\n/g )
    .filter( function( line ) {
      return !/([^\/]+)\/HEAD\s+->/.test( line )
    })
    .map( function( line, i ) {
      line = line.replace( /^\s+|\s+$/g, '' )
      // Strip the active branch indicator
      if( /^\*\s+/.test( line ) ) {
        line = line.replace( /^\*\s+/, '' )
        currentBranchIndex = i
      }
      return line
    })

  // Put the current branch up top
  lines.unshift( lines.splice( currentBranchIndex, 1 )[0] )

  var branches = lines.map(( branch ) => {
    return { value: branch, title: `  ${branch}` }
  })

  function suggest( input ) {
    var results = branches.filter(( branch ) => {
      return ~branch.value.indexOf( input )
    })
    return Promise.resolve( results )
  }

  cliCursor.hide()

  ask( 'Select a branch:', suggest )
    .once( 'submit', checkout )

})
