#!/usr/bin/env node
var exec = require( 'child_process' ).exec
var cliCursor = require( 'cli-cursor' )
var { commandJoin } = require( 'command-join' )
var elements = require( 'prompts/lib/elements' )
var Fuse = require( 'fuse.js' )
var argv = process.argv.slice( 2 )

// handle argument for local only branches
var all = argv.indexOf('--local') < 0
argv = argv.filter(a => a !== '--local')

// Make sure the terminal cursor doesn't stay hidden
// after the program exits
function exitHandler() {
  cliCursor.show()
}

// Catches ctrl+c & exit events
process.on( 'SIGINT', exitHandler )
process.on( 'exit', exitHandler )

function checkout( branch ) {

  if(!branch) {
    process.stdout.write( '\n' )
    process.stdout.write( 'No such branch' )
    process.stdout.write( '\n' )
    process.exit(1)
  }

  var checkoutCmd = [ 'git', 'checkout' ]

  !branch.upstream ?
    checkoutCmd.push( '--track', branch.refName ) :
    checkoutCmd.push( branch.refName )

  exec( commandJoin( checkoutCmd ), {
    cwd: process.cwd(),
    env: process.env,
  }, function( error, stdout, stderr ) {

    // Only write out the most important part
    process.stdout.write( '\n' )
    process.stdout.write( stdout.toString().split( /\r?\n/g ).pop() )
    process.stderr.write( stderr.toString().split( /\r?\n/g ).shift() )
    process.stdout.write( '\n' )

    // Print status after branch change manually,
    // as `git checkout` doesn't do color output
    exec( commandJoin([ 'git', 'status', '-sb' ]), {
      cwd: process.cwd(),
      env: process.env,
    }, function( _, stdout, stderr ) {

      process.stdout.write( '\n' )
      process.stdout.write( stdout )
      process.stderr.write( stderr )

      process.exit( error ? error.code : 0 )

    })

  })
}

var branchFormat = '%(HEAD)|%(refname)|%(refname:lstrip=2)|%(upstream)|%(upstream:remotename)|%(upstream:remoteref)|%(push)'
var q = process.platform === 'win32' ? '"' : "'"

exec( `git branch --list ${ all ? '--all' : ''} --no-color --sort=-committerdate --format=${q}${branchFormat}${q}`, function( error, stdout, stderr ) {

  var lines = stdout.trim().split( /\r?\n/g )
    .map( function( line, i ) {
      var [ head, ref, refName, upstream, remoteName, remoteRef, push ] = line.trim().split( /\|/g )
      return { head: head === '*', ref, refName, upstream, remoteName, remoteRef, push }
    })
    .filter( ( branch ) => {
      return !/\/HEAD$/.test( branch.ref )
    })

  // Put the current branch up top, so that simply hitting [Enter]
  // won't make you accidentally change branches
  var currentBranchIndex = lines.findIndex( branch => branch.head )
  lines.unshift( lines.splice( currentBranchIndex, 1 )[0] )

  // De-duplicate remotes & locals
  var branches = new Map()

  lines.forEach(( branch ) => {
    if( branches.has( branch.ref ) ) {
      var stored = branches.get( branch.ref )
      stored.remoteName = stored.remoteName || branch.remoteName
    } else {
      branches.set( branch.push || branch.ref, branch )
    }
  })

  // Materialize result list for search & prompt
  var results = []
  for( var [ ref, branch ] of branches ) {
    results.push({ title: `  ${branch.refName}`, value: branch })
  }

  var fuse = new Fuse( results, {
    shouldSort: true,
    findAllMatches: true,
    minMatchCharLength: 1,
    keys: [ 'title' ],
  })

  function suggest( input ) {
    return Promise.resolve( input ? fuse.search( input ) : results )
  }

  function prompt() {

    var input = new elements.AutocompletePrompt({
      type: 'autocomplete',
      name: 'value',
      message: 'Select a branch:',
      limit: process.stdout.rows - 3,
      choices: results,
      suggest: suggest,
    })

    // Override initial input & re-render,
    // as there's no option to set the initial input value
    input.input = argv[0] || ''
    input.cursor = input.input.length
    input.complete( input.render )

    input.on( 'submit', checkout )

  }

  prompt()

})
